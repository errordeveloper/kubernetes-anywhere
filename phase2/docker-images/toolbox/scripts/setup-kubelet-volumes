#!/bin/bash

# Copyright 2016 The Kubernetes Authors All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

KUBERNETES_ANYWHERE_TOOLBOX_IMAGE=${KUBERNETES_ANYWHERE_TOOLBOX_IMAGE:-'weaveworks/kubernetes-anywhere:toolbox'}

mount_make_rshared() {
  echo "Calling \`mount --make-rshared /\` to ensure \`kubelet-volumes\` is functional"
  docker run \
    --pid="host" \
    --privileged="true" \
    "${KUBERNETES_ANYWHERE_TOOLBOX_IMAGE}" nsenter --mount=/proc/1/ns/mnt -- mount --make-rshared / /
}

if [[ $(docker inspect --format='{{.State.Status}}' kubelet-volumes 2> /dev/null) = 'created' ]]
then
  echo "Docker container \`kubelet-volume\` aleady exists"
  mount_make_rshared
  exit
else

  volumes=(
    "/:/rootfs:ro"
    "/sys:/sys:ro"
    "/dev:/dev"
    "/var/run:/var/run:rw"
  )

  def_docker_root="/var/lib/docker"
  def_kubelet_root="/var/lib/kubelet"
  def_kubelet_logs="/var/log/containers"

  if [ -d /rootfs/etc ] && [ -f /rootfs/etc/os-release ]
  then
    case "$(eval "$(cat "/rootfs/etc/os-release")" ; echo "${ID}" )" in
      boot2docker)
        docker_root="/mnt/sda1/${def_docker_root}"
        kubelet_root="/mnt/sda1/${def_kubelet_root}"
        kubelet_logs="/mnt/sda1/${def_kubelet_logs}"
        mkdir -p "/rootfs/${kubelet_root}"
        mkdir -p "/rootfs/${kubelet_logs}"
        ln -sf "${kubelet_root}" "/rootfs/${def_kubelet_root}"
        ln -sf "${kubelet_logs}" "/rootfs/${def_kubelet_logs}"
        volumes+=(
          "${docker_root}:${docker_root}:rw"
          "${def_docker_root}:${def_docker_root}:rw"
          "${kubelet_root}:${def_kubelet_root}:rw,rshared"
          "${kubelet_logs}:${def_kubelet_logs}:rw"
        )
        ;;
      *)
        mkdir -p "/rootfs/${kubelet_root}"
        mkdir -p "/rootfs/${kubelet_logs}"
        volumes+=(
          "${def_docker_root}/:${def_docker_root}:rw"
          "${def_kubelet_root}:${def_kubelet_root}:rw,rshared"
          "${def_kubelet_logs}:${def_kubelet_logs}:rw"
        )
        ;;
    esac
  else
    echo "Root filesystem from the host has to be mounted (please use \`--volume=\"/:/rootfs\"\`)."
    exit 1
  fi
  if [ "${USE_CNI}" = "yes" ]
  then
    docker_sock_vol="/var/run/docker.sock:/docker.sock"
  else
    docker_sock_vol="/var/run/weave/weave.sock:/docker.sock"
  fi

  volumes+=("${docker_sock_vol}")

  mount_make_rshared

  volume_args=()
  for v in "${volumes[@]}" ; do volume_args+=("--volume=\"${v}\"") ; done
  docker create \
    "${volume_args[@]}" \
    --name="kubelet-volumes" \
    "${KUBERNETES_ANYWHERE_TOOLBOX_IMAGE}" true
fi
